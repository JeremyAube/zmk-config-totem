//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
       

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define SYM  1
#define NUM  2
#define FN   3

&mt {
  quick-tap-ms = <100>;
  global-quick-tap;
  flavor = "tap-preferred";
  tapping-term-ms = <200>;
};
 
&sl {
    release-after-ms: 1000;
};

/ {
        keymap {
                compatible = "zmk,keymap";

                // -------------- BASE LAYER --------------
                base_layer {
                    label= "BASE";
                    bindings = <
                &kp Q       &kp W       &kp E       &kp R       &kp T           &kp Y       &kp U       &kp I       &kp O       &kp P
                &mt LCTRL A &mt LALT S  &mt LGUI D  &kp F       &kp G           &kp H       &kp J       &mt RGUI K  &mt RALT L  &mt RCTRL BSPC
    &kp TAB     &kp Z       &kp X       &kp C       &kp V       &kp B           &kp N       &kp M       &kp COMMA   &kp DOT     &kp TAB    &kp BSLH
                                        &lt FN ESC  &kp LSHIFT  &sl SYM         &sl NUM     &lt FN SPACE &kp RET
                    >;
                };

                // -------------- SYM LAYER --------------
                sym_layer {
                    label= "SYM";
                    bindings = <
                &kp EXCL    &kp AT      &kp HASH    &kp DLLR    &kp PRCNT       &kp CARET   &kp AMPS    &kp ASTRK   &kp MINUS   &kp SEMI
                &kp GRAVE   &kp LBRC    &kp RPAR    &kp LBKT    &kp LT          &kp GT      &kp RBKT    &kp RPAR    &kp RBRC    &kp COLON
    &trans      &kp TILDE   &kp SLASH   &kp EQUAL   &kp PIPE    &kp BSLH        &kp UNDER   &kp PLUS    &kp APOS    &kp DQT     &kp QMARK   &trans      
                                        &trans      &trans      &trans          &trans      &trans      &trans      
                    >;
                };

                // -------------- NUM LAYER --------------
                num_layer {
                    label= "NUM";
                    bindings = <
                &kp N1      &kp N2      &kp N3      &kp n4        &kp n5          &kp n6      &kp n7      &kp n8      &kp n9      &kp n0       
                &kp LA(U)   &kp LA(I)   &trans      &kp LA(GRAVE) &kp LA(E)       &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &trans 
    &trans      &kp LA(N)   &kp SLASH   &kp LA(C)   &trans        &trans          &kp MINUS   &kp PLUS    &kp LT      &kp GT      &kp trans   &trans         
                                        &trans      &trans        &trans          &trans      &trans      &trans      
                    >;
                };


                // -------------- FN LAYER --------------
                function_layer {
                    label= "FN";
                    bindings = <
                &kp F1      &kp F2      &kp F3      &kp F4      &kp F5          &kp F6      &kp F7       &kp F8       &kp F9      &kp F10
                &trans      &trans      &trans      &trans      &trans          &trans      &kp C_VOL_UP &kp C_BRI_UP &kp F11     &kp DEL  
    &trans      &trans      &trans      &kp LG(X)   &kp LG(C)   &kp LG(V)       &trans      &kp C_VOL_DN &kp C_BRI_DN &kp F12     &trans      &trans         
                                        &trans      &trans      &trans          &trans      &trans       &trans      
                    >;
                };
        };
};
